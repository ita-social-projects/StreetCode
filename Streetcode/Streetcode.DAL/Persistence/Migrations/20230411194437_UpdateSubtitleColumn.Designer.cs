// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Streetcode.DAL.Persistence;

#nullable disable

namespace Streetcode.DAL.Persistence.Migrations
{
    [DbContext(typeof(StreetcodeDbContext))]
    [Migration("20230411194437_UpdateSubtitleColumn")]
    partial class UpdateSubtitleColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Ukrainian_CP1251_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FactStreetcodeContent", b =>
                {
                    b.Property<int>("FactsId")
                        .HasColumnType("int");

                    b.Property<int>("StreetcodesId")
                        .HasColumnType("int");

                    b.HasKey("FactsId", "StreetcodesId");

                    b.HasIndex("StreetcodesId");

                    b.ToTable("streetcode_fact", "streetcode");
                });

            modelBuilder.Entity("HistoricalContextTimelineItem", b =>
                {
                    b.Property<int>("HistoricalContextsId")
                        .HasColumnType("int");

                    b.Property<int>("TimelineItemsId")
                        .HasColumnType("int");

                    b.HasKey("HistoricalContextsId", "TimelineItemsId");

                    b.HasIndex("TimelineItemsId");

                    b.ToTable("timeline_item_historical_context", "timeline");
                });

            modelBuilder.Entity("ImageStreetcodeContent", b =>
                {
                    b.Property<int>("ImagesId")
                        .HasColumnType("int");

                    b.Property<int>("StreetcodesId")
                        .HasColumnType("int");

                    b.HasKey("ImagesId", "StreetcodesId");

                    b.HasIndex("StreetcodesId");

                    b.ToTable("streetcode_image", "streetcode");
                });

            modelBuilder.Entity("PartnerStreetcodeContent", b =>
                {
                    b.Property<int>("PartnersId")
                        .HasColumnType("int");

                    b.Property<int>("StreetcodesId")
                        .HasColumnType("int");

                    b.HasKey("PartnersId", "StreetcodesId");

                    b.HasIndex("StreetcodesId");

                    b.ToTable("streetcode_partners", "streetcode");
                });

            modelBuilder.Entity("SourceLinkCategoryStreetcodeContent", b =>
                {
                    b.Property<int>("SourceLinkCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("StreetcodesId")
                        .HasColumnType("int");

                    b.HasKey("SourceLinkCategoriesId", "StreetcodesId");

                    b.HasIndex("StreetcodesId");

                    b.ToTable("streetcode_source_link_categories", "sources");
                });

            modelBuilder.Entity("SourceLinkSourceLinkSubCategory", b =>
                {
                    b.Property<int>("SourceLinksId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoriesId")
                        .HasColumnType("int");

                    b.HasKey("SourceLinksId", "SubCategoriesId");

                    b.HasIndex("SubCategoriesId");

                    b.ToTable("source_link_source_link_subcategory", "sources");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.AdditionalContent.Coordinates.Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CoordinateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Longtitude")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("coordinates", "add_content");

                    b.HasDiscriminator<string>("CoordinateType").HasValue("coordinate_base");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.AdditionalContent.Subtitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("StreetcodeId")
                        .HasColumnType("int");

                    b.Property<string>("SubtitleText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StreetcodeId");

                    b.ToTable("subtitles", "add_content");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.AdditionalContent.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tags", "add_content");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Feedback.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("donations", "feedback");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Feedback.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("responses", "feedback");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Media.Audio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetcodeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("StreetcodeId")
                        .IsUnique();

                    b.ToTable("audios", "media");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Media.Images.Art", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.ToTable("arts", "media");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Media.Images.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Alt")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("images", "media");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Media.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetcodeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StreetcodeId");

                    b.ToTable("videos", "media");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Partners.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsKeyPartner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LogoId")
                        .HasColumnType("int");

                    b.Property<string>("TargetUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LogoId")
                        .IsUnique();

                    b.ToTable("partners", "partners");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Partners.PartnerSourceLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("LogoType")
                        .HasColumnType("tinyint");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("TargetUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("partner_source_links", "partners");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Sources.SourceLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("source_links", "sources");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Sources.SourceLinkCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("source_link_categories", "sources");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Sources.SourceLinkSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SourceLinkCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SourceLinkCategoryId");

                    b.ToTable("source_link_subcategories", "sources");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.RelatedFigure", b =>
                {
                    b.Property<int>("ObserverId")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.HasKey("ObserverId", "TargetId");

                    b.HasIndex("TargetId");

                    b.ToTable("related_figures", "streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.StreetcodeArt", b =>
                {
                    b.Property<int>("ArtId")
                        .HasColumnType("int");

                    b.Property<int>("StreetcodeId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ArtId", "StreetcodeId");

                    b.HasIndex("StreetcodeId");

                    b.HasIndex("ArtId", "StreetcodeId");

                    b.ToTable("streetcode_art", "streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Alias")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DateString")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EventEndOrPersonDeathDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventStartOrPersonBirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StreetcodeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teaser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransliterationUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("TransliterationUrl")
                        .IsUnique();

                    b.ToTable("streetcodes", "streetcode");

                    b.HasDiscriminator<string>("StreetcodeType").HasValue("streetcode-base");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.TextContent.Fact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FactContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("facts", "streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.TextContent.RelatedTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TermId");

                    b.ToTable("related_terms", "streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.TextContent.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("terms", "streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.TextContent.Text", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("StreetcodeId")
                        .HasColumnType("int");

                    b.Property<string>("TextContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("StreetcodeId")
                        .IsUnique();

                    b.ToTable("texts", "streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Timeline.HistoricalContext", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("historical_contexts", "timeline");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Timeline.TimelineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("timeline_items", "timeline");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Toponyms.Toponym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminRegionNew")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AdminRegionOld")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Community")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Gromada")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Oblast")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("StreetType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("toponyms", "toponyms");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Transactions.TransactionLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("QrCodeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QrCodeUrlTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetcodeId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StreetcodeId")
                        .IsUnique();

                    b.ToTable("transaction_links", "transactions");
                });

            modelBuilder.Entity("StreetcodeContentTag", b =>
                {
                    b.Property<int>("StreetcodesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("StreetcodesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("streetcode_tag", "streetcode");
                });

            modelBuilder.Entity("StreetcodeContentTimelineItem", b =>
                {
                    b.Property<int>("StreetcodesId")
                        .HasColumnType("int");

                    b.Property<int>("TimelineItemsId")
                        .HasColumnType("int");

                    b.HasKey("StreetcodesId", "TimelineItemsId");

                    b.HasIndex("TimelineItemsId");

                    b.ToTable("streetcode_timeline_item", "streetcode");
                });

            modelBuilder.Entity("StreetcodeContentToponym", b =>
                {
                    b.Property<int>("StreetcodesId")
                        .HasColumnType("int");

                    b.Property<int>("ToponymsId")
                        .HasColumnType("int");

                    b.HasKey("StreetcodesId", "ToponymsId");

                    b.HasIndex("ToponymsId");

                    b.ToTable("streetcode_toponym", "streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.AdditionalContent.Coordinates.Types.StreetcodeCoordinate", b =>
                {
                    b.HasBaseType("Streetcode.DAL.Entities.AdditionalContent.Coordinates.Coordinate");

                    b.Property<int>("StreetcodeId")
                        .HasColumnType("int");

                    b.HasIndex("StreetcodeId");

                    b.ToTable("coordinates", "add_content");

                    b.HasDiscriminator().HasValue("coordinate_streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.AdditionalContent.Coordinates.Types.ToponymCoordinate", b =>
                {
                    b.HasBaseType("Streetcode.DAL.Entities.AdditionalContent.Coordinates.Coordinate");

                    b.Property<int>("ToponymId")
                        .HasColumnType("int");

                    b.HasIndex("ToponymId")
                        .IsUnique()
                        .HasFilter("[ToponymId] IS NOT NULL");

                    b.ToTable("coordinates", "add_content");

                    b.HasDiscriminator().HasValue("coordinate_toponym");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.Types.EventStreetcode", b =>
                {
                    b.HasBaseType("Streetcode.DAL.Entities.Streetcode.StreetcodeContent");

                    b.ToTable("streetcodes", "streetcode");

                    b.HasDiscriminator().HasValue("streetcode-event");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.Types.PersonStreetcode", b =>
                {
                    b.HasBaseType("Streetcode.DAL.Entities.Streetcode.StreetcodeContent");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Rank")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("streetcodes", "streetcode");

                    b.HasDiscriminator().HasValue("streetcode-person");
                });

            modelBuilder.Entity("FactStreetcodeContent", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Streetcode.TextContent.Fact", null)
                        .WithMany()
                        .HasForeignKey("FactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", null)
                        .WithMany()
                        .HasForeignKey("StreetcodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HistoricalContextTimelineItem", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Timeline.HistoricalContext", null)
                        .WithMany()
                        .HasForeignKey("HistoricalContextsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streetcode.DAL.Entities.Timeline.TimelineItem", null)
                        .WithMany()
                        .HasForeignKey("TimelineItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageStreetcodeContent", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Media.Images.Image", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", null)
                        .WithMany()
                        .HasForeignKey("StreetcodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartnerStreetcodeContent", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Partners.Partner", null)
                        .WithMany()
                        .HasForeignKey("PartnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", null)
                        .WithMany()
                        .HasForeignKey("StreetcodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SourceLinkCategoryStreetcodeContent", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Sources.SourceLinkCategory", null)
                        .WithMany()
                        .HasForeignKey("SourceLinkCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", null)
                        .WithMany()
                        .HasForeignKey("StreetcodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SourceLinkSourceLinkSubCategory", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Sources.SourceLink", null)
                        .WithMany()
                        .HasForeignKey("SourceLinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streetcode.DAL.Entities.Sources.SourceLinkSubCategory", null)
                        .WithMany()
                        .HasForeignKey("SubCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.AdditionalContent.Subtitle", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", "Streetcode")
                        .WithMany("Subtitles")
                        .HasForeignKey("StreetcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Media.Audio", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", "Streetcode")
                        .WithOne("Audio")
                        .HasForeignKey("Streetcode.DAL.Entities.Media.Audio", "StreetcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Media.Images.Art", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Media.Images.Image", "Image")
                        .WithOne("Art")
                        .HasForeignKey("Streetcode.DAL.Entities.Media.Images.Art", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Media.Video", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", "Streetcode")
                        .WithMany("Videos")
                        .HasForeignKey("StreetcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Partners.Partner", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Media.Images.Image", "Logo")
                        .WithOne("Partner")
                        .HasForeignKey("Streetcode.DAL.Entities.Partners.Partner", "LogoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logo");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Partners.PartnerSourceLink", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Partners.Partner", "Partner")
                        .WithMany("PartnerSourceLinks")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Sources.SourceLinkCategory", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Media.Images.Image", "Image")
                        .WithMany("SourceLinkCategories")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Sources.SourceLinkSubCategory", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Sources.SourceLinkCategory", "SourceLinkCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("SourceLinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceLinkCategory");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.RelatedFigure", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", "Observer")
                        .WithMany("Observers")
                        .HasForeignKey("ObserverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", "Target")
                        .WithMany("Targets")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Observer");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.StreetcodeArt", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Media.Images.Art", "Art")
                        .WithMany("StreetcodeArts")
                        .HasForeignKey("ArtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", "Streetcode")
                        .WithMany("StreetcodeArts")
                        .HasForeignKey("StreetcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Art");

                    b.Navigation("Streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.TextContent.Fact", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Media.Images.Image", "Image")
                        .WithMany("Facts")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.TextContent.RelatedTerm", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Streetcode.TextContent.Term", "Term")
                        .WithMany("RelatedTerms")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.TextContent.Text", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", "Streetcode")
                        .WithOne("Text")
                        .HasForeignKey("Streetcode.DAL.Entities.Streetcode.TextContent.Text", "StreetcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Transactions.TransactionLink", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", "Streetcode")
                        .WithOne("TransactionLink")
                        .HasForeignKey("Streetcode.DAL.Entities.Transactions.TransactionLink", "StreetcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Streetcode");
                });

            modelBuilder.Entity("StreetcodeContentTag", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", null)
                        .WithMany()
                        .HasForeignKey("StreetcodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streetcode.DAL.Entities.AdditionalContent.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StreetcodeContentTimelineItem", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", null)
                        .WithMany()
                        .HasForeignKey("StreetcodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streetcode.DAL.Entities.Timeline.TimelineItem", null)
                        .WithMany()
                        .HasForeignKey("TimelineItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StreetcodeContentToponym", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", null)
                        .WithMany()
                        .HasForeignKey("StreetcodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Streetcode.DAL.Entities.Toponyms.Toponym", null)
                        .WithMany()
                        .HasForeignKey("ToponymsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.AdditionalContent.Coordinates.Types.StreetcodeCoordinate", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", "Streetcode")
                        .WithMany("Coordinates")
                        .HasForeignKey("StreetcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Streetcode");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.AdditionalContent.Coordinates.Types.ToponymCoordinate", b =>
                {
                    b.HasOne("Streetcode.DAL.Entities.Toponyms.Toponym", "Toponym")
                        .WithOne("Coordinate")
                        .HasForeignKey("Streetcode.DAL.Entities.AdditionalContent.Coordinates.Types.ToponymCoordinate", "ToponymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Toponym");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Media.Images.Art", b =>
                {
                    b.Navigation("StreetcodeArts");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Media.Images.Image", b =>
                {
                    b.Navigation("Art");

                    b.Navigation("Facts");

                    b.Navigation("Partner");

                    b.Navigation("SourceLinkCategories");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Partners.Partner", b =>
                {
                    b.Navigation("PartnerSourceLinks");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Sources.SourceLinkCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.StreetcodeContent", b =>
                {
                    b.Navigation("Audio");

                    b.Navigation("Coordinates");

                    b.Navigation("Observers");

                    b.Navigation("StreetcodeArts");

                    b.Navigation("Subtitles");

                    b.Navigation("Targets");

                    b.Navigation("Text");

                    b.Navigation("TransactionLink");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Streetcode.TextContent.Term", b =>
                {
                    b.Navigation("RelatedTerms");
                });

            modelBuilder.Entity("Streetcode.DAL.Entities.Toponyms.Toponym", b =>
                {
                    b.Navigation("Coordinate")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
