<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotBeEmpty" xml:space="preserve">
    <value>Поле '{0}' не може бути пусте</value>
  </data>
  <data name="ValidUrl" xml:space="preserve">
    <value>Поле '{0}' повинно бути дійсною URL адресою </value>
  </data>
  <data name="CannotBeEmptyWithCondition" xml:space="preserve">
    <value>Поле '{0}' не може бути пусте, якщо введено поле '{1}'</value>
  </data>
  <data name="IsRequired" xml:space="preserve">
    <value>'{0}' обов'язкове поле</value>
  </data>
  <data name="Invalid" xml:space="preserve">
    <value>Поле '{0}' має недійсне значення</value>
  </data>
  <data name="LogoMustMatchUrl" xml:space="preserve">
    <value>Посилання не співпадає з обраною соціальною мережою</value>
  </data>
  <data name="ValidUrl_UrlDisplayed" xml:space="preserve">
    <value>Поле '{0}' ({1}) повинно бути дійсною URL адресою </value>
  </data>
  <data name="GreaterThan" xml:space="preserve">
    <value>'{0}' має бути більше ніж {1}</value>
  </data>
  <data name="MaxLength" xml:space="preserve">
    <value>Максимальна довжина поля '{0}' - {1}</value>
  </data>
  <data name="MustBeOneOf" xml:space="preserve">
    <value>Поле '{0}' приймає тільки наступні значення: {1}</value>
  </data>
  <data name="LengthMustBeInRange" xml:space="preserve">
    <value>Довжина поля '{0}' має бути від {1} до {2}</value>
  </data>
  <data name="EmailAddressFormat" xml:space="preserve">
    <value>Адреса електронної пошти повинна бути в правильному форматі</value>
  </data>
  <data name="TransliterationUrlFormat" xml:space="preserve">
    <value>Транслітероване посилання має містити тільки маленькі латинські літери, цифри та дефіс</value>
  </data>
  <data name="MustBeBetween" xml:space="preserve">
    <value>Поле '{0}' має бути між {1} і {2}</value>
  </data>
  <data name="MustBeUnique" xml:space="preserve">
    <value>Поле '{0}' має бути унікальним</value>
  </data>
  <data name="ImageDoesntExist" xml:space="preserve">
    <value>Картинка з ідентифікатором {0} не існує</value>
  </data>
  <data name="InvalidNewsUrl" xml:space="preserve">
    <value>Поле 'Посилання' може приймати тільки малі латинські літери, дефіс та цифри</value>
  </data>
  <data name="InvalidPrecision" xml:space="preserve">
    <value>Поле '{0}' має неправильну точність</value>
  </data>
  <data name="DateStringFormat" xml:space="preserve">
    <value>Поле 'Рядок дати' приймає лише кириличні літери, цифри, тире (–) і круглі дужки.</value>
  </data>
  <data name="MustContainExactlyOneAlt1" xml:space="preserve">
    <value>Поле '{0}' має містити рівно одне чорно-біле зображення.</value>
  </data>
  <data name="MustContainAtMostOneAlt0" xml:space="preserve">
    <value>Поле '{0}' може містити щонайбільше одне кольорове зображення.</value>
  </data>
  <data name="MustContainAtMostOneAlt2" xml:space="preserve">
    <value>Поле '{0}' може містити щонайбільше одне зображення для звʼязків.</value>
  </data>
  <data name="EventStreetcodeCannotHasFirstName" xml:space="preserve">
    <value>Стріткод типу 'Подія' не може мати поля 'Ім'я' та 'Прізвище' </value>
  </data>
  <data name="MinLength" xml:space="preserve">
    <value>Мінімальна довжина поля '{0}' - {1}</value>
  </data>
  <data name="MustContainAtMostThreeExpertises" xml:space="preserve">
    <value>Поле '{0}' може містити щонайбільше три досвіди.</value>
  </data>
  <data name="NameFormat" xml:space="preserve">
    <value>Ім'я повинно складатися лише з літер латиниці або кирилиці (великих і малих) та може містити лише символи дефіс (-) і апостроф (').</value>
  </data>
  <data name="SurnameFormat" xml:space="preserve">
    <value>Прізвище повинно складатися лише з літер латиниці або кирилиці (великих і малих) та може містити лише символи дефіс (-) і апостроф (').</value>
  </data>
  <data name="UserNameFormat" xml:space="preserve">
    <value>Нікнейм повинен складатися лише з літер латиниці (малих) та може містити лише символи дефіс (-), апостроф (') та підкреслення(_).</value>
  </data>
  <data name="ImageSizeExceeded" xml:space="preserve">
    <value>Розмір картинки не може перевищувати {0} MB</value>
  </data>
  <data name="InvalidPaginationParameters" xml:space="preserve">
    <value>Параметри пагінації повинні бути коректними</value>
  </data>
  <data name="MustNotBeInPast" xml:space="preserve">
    <value>{0} не повинна бути у минулому.</value>
  </data>
</root>